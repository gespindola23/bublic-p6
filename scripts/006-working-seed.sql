-- Working seed script that handles foreign key constraints properly
-- This script creates sample data that works with the existing schema

-- First, let's check if we need to modify the profiles table structure
-- We'll temporarily disable the foreign key constraint or work with it

-- Option 1: Create the profiles without the auth.users dependency
-- We'll modify the constraint temporarily

-- Disable foreign key constraint temporarily
ALTER TABLE public.profiles DROP CONSTRAINT IF EXISTS profiles_id_fkey;
ALTER TABLE public.profiles DROP CONSTRAINT IF EXISTS profiles_pkey;

-- Recreate the table structure without the auth dependency
DROP TABLE IF EXISTS public.profiles CASCADE;
CREATE TABLE public.profiles (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  full_name text,
  avatar_url text,
  title text,
  company text,
  verified boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Recreate posts table to reference the new profiles structure
DROP TABLE IF EXISTS public.posts CASCADE;
CREATE TABLE public.posts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  is_premium boolean DEFAULT false,
  price numeric(10, 2),
  metrics jsonb,
  attachment jsonb,
  job_posting jsonb,
  company_id uuid
);

-- Enable RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;

-- Create policies
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
DROP POLICY IF EXISTS "Public posts are viewable by everyone." ON public.posts;

CREATE POLICY "Public profiles are viewable by everyone."
  ON public.profiles FOR SELECT
  USING (true);

CREATE POLICY "Public posts are viewable by everyone."
  ON public.posts FOR SELECT
  USING (true);

-- Insert sample profiles with generated UUIDs
INSERT INTO public.profiles (full_name, avatar_url, title, company, verified) VALUES
  ('Sarah Chen', '/placeholder.svg?height=40&width=40', 'Founder & CEO', 'TechFlow', true),
  ('Marcus Rodriguez', '/placeholder.svg?height=40&width=40', 'Co-founder', 'GrowthLabs', true),
  ('Emma Thompson', '/placeholder.svg?height=40&width=40', 'Head of Engineering', 'EcoTech', false),
  ('Alex Kim', '/placeholder.svg?height=40&width=40', 'Founder', 'DeployFast', true),
  ('Jordan Lee', '/placeholder.svg?height=40&width=40', 'Serial Entrepreneur', 'Venture Studio', true);

-- Insert sample posts using the actual profile IDs
INSERT INTO public.posts (user_id, content, is_premium, price, metrics, attachment, job_posting, created_at)
SELECT 
  p.id,
  CASE 
    WHEN p.full_name = 'Sarah Chen' THEN 'ðŸš€ Milestone Alert! We just hit $50K MRR after 8 months of building in public. Here''s what we learned about product-led growth and why we''re doubling down on our community strategy. #BuildInPublic'
    WHEN p.full_name = 'Marcus Rodriguez' THEN 'The hardest part about fundraising isn''t the pitch deck - it''s maintaining team morale during the process. Here''s how we kept our team motivated during our Series A... ðŸ§µ'
    WHEN p.full_name = 'Emma Thompson' THEN 'We''re hiring! Looking for a Senior Full-Stack Developer to join our mission of making sustainability accessible to everyone. Remote-first, competitive equity package ðŸŒ± #Hiring #Jobs'
    WHEN p.full_name = 'Alex Kim' THEN 'Just closed our seed round! ðŸŽ‰ $2M to revolutionize how developers deploy applications. Huge thanks to our investors and early customers who believed in our vision. Now the real work begins...'
    WHEN p.full_name = 'Jordan Lee' THEN 'Hot take: Most startups fail not because of product-market fit, but because of founder-market fit. You need to be obsessed with the problem you''re solving, not just the solution. Thoughts? ðŸ¤”'
  END,
  CASE 
    WHEN p.full_name = 'Marcus Rodriguez' THEN true
    ELSE false
  END,
  CASE 
    WHEN p.full_name = 'Marcus Rodriguez' THEN 5.00
    ELSE null
  END,
  CASE 
    WHEN p.full_name = 'Sarah Chen' THEN '{"mrr": "$50,000", "growth": "+25%"}'::jsonb
    WHEN p.full_name = 'Alex Kim' THEN '{"funding": "$2M", "stage": "Seed"}'::jsonb
    ELSE null
  END,
  CASE 
    WHEN p.full_name = 'Marcus Rodriguez' THEN '{"type": "pdf", "title": "Series A Fundraising Playbook", "gated": true}'::jsonb
    ELSE null
  END,
  CASE 
    WHEN p.full_name = 'Emma Thompson' THEN '{"title": "Senior Full-Stack Developer", "location": "Remote", "type": "Full-time"}'::jsonb
    ELSE null
  END,
  CASE 
    WHEN p.full_name = 'Sarah Chen' THEN NOW() - INTERVAL '2 hours'
    WHEN p.full_name = 'Marcus Rodriguez' THEN NOW() - INTERVAL '4 hours'
    WHEN p.full_name = 'Emma Thompson' THEN NOW() - INTERVAL '6 hours'
    WHEN p.full_name = 'Alex Kim' THEN NOW() - INTERVAL '8 hours'
    WHEN p.full_name = 'Jordan Lee' THEN NOW() - INTERVAL '12 hours'
  END
FROM public.profiles p;

-- Verify the data was inserted
SELECT 
  'Successfully created ' || COUNT(*) || ' profiles and ' || 
  (SELECT COUNT(*) FROM public.posts) || ' posts!' as result
FROM public.profiles;

-- Show sample of what was created
SELECT 
  p.full_name,
  p.company,
  p.verified,
  posts.content_preview
FROM public.profiles p
LEFT JOIN (
  SELECT 
    user_id,
    LEFT(content, 50) || '...' as content_preview
  FROM public.posts
) posts ON p.id = posts.user_id
ORDER BY p.full_name;
