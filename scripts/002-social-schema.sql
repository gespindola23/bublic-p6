-- 1. Create Profiles Table
-- This table will store public user data, extending the auth.users table.
create table if not exists public.profiles (
  id uuid not null primary key,
  full_name text,
  avatar_url text,
  title text,
  company text,
  verified boolean default false,
  constraint id foreign key(id) references auth.users(id) on delete cascade
);

-- 2. Create Posts Table
-- This table will store all the posts created by users.
create table if not exists public.posts (
  id bigint generated by default as identity primary key,
  user_id uuid not null references public.profiles(id) on delete cascade,
  content text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  is_premium boolean default false,
  price numeric(10, 2),
  metrics jsonb,
  attachment jsonb,
  job_posting jsonb
);

-- 3. Set up Row Level Security (RLS)
-- RLS ensures that users can only access and modify data they are permitted to.
-- Enable RLS for profiles and posts
alter table public.profiles enable row level security;
alter table public.posts enable row level security;

-- Policies for Profiles
create policy "Public profiles are viewable by everyone."
  on public.profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on public.profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update their own profile."
  on public.profiles for update
  using ( auth.uid() = id );

-- Policies for Posts
create policy "Posts are viewable by everyone."
  on public.posts for select
  using ( true );

create policy "Users can insert their own posts."
  on public.posts for insert
  with check ( auth.uid() = user_id );

create policy "Users can update their own posts."
  on public.posts for update
  using ( auth.uid() = user_id );

create policy "Users can delete their own posts."
  on public.posts for delete
  using ( auth.uid() = user_id );


-- 4. Seed Data
-- This block will seed the database with a sample profile and posts
-- for the first user found in the auth.users table.
DO $$
DECLARE
    seed_user_id uuid;
BEGIN
    -- Find a user to attribute the seed data to.
    SELECT id INTO seed_user_id FROM auth.users LIMIT 1;

    -- Only proceed with seeding if a user is found.
    IF seed_user_id IS NOT NULL THEN
        -- Create a profile for the user if it doesn't exist, or update it.
        INSERT INTO public.profiles (id, full_name, avatar_url, title, company, verified)
        VALUES (seed_user_id, 'Sarah Chen', '/placeholder.svg?height=40&width=40', 'Founder & CEO at TechFlow', 'TechFlow', true)
        ON CONFLICT (id) DO UPDATE SET
            full_name = EXCLUDED.full_name,
            avatar_url = EXCLUDED.avatar_url,
            title = EXCLUDED.title,
            company = EXCLUDED.company,
            verified = EXCLUDED.verified;

        -- Clean up existing seed posts for this user to avoid duplicates on re-runs
        DELETE FROM public.posts WHERE user_id = seed_user_id AND (
            content LIKE 'ðŸš€ Milestone Alert!%' OR
            content LIKE 'The hardest part about fundraising%' OR
            content LIKE 'We''re hiring!%'
        );

        -- Seed Posts
        INSERT INTO public.posts (user_id, content, is_premium, price, metrics, attachment, job_posting)
        VALUES
            (
                seed_user_id,
                'ðŸš€ Milestone Alert! We just hit $50K MRR after 8 months of building in public. Here''s what we learned about product-led growth and why we''re doubling down on our community strategy. #BuildInPublic',
                false,
                null,
                '{"mrr": "$50,000", "growth": "+25%"}',
                null,
                null
            ),
            (
                seed_user_id,
                'The hardest part about fundraising isn''t the pitch deck - it''s maintaining team morale during the process. Here''s how we kept our team motivated during our Series A... This is premium content that reveals our internal strategies.',
                true,
                5.00,
                null,
                '{"type": "pdf", "title": "Series A Fundraising Playbook", "gated": true}',
                null
            ),
            (
                seed_user_id,
                'We''re hiring! Looking for a Senior Full-Stack Developer to join our mission of making sustainability accessible to everyone. Remote-first, competitive equity package ðŸŒ± #Hiring #Jobs',
                false,
                null,
                null,
                null,
                '{"title": "Senior Full-Stack Developer", "location": "Remote", "type": "Full-time"}'
            );
    ELSE
        RAISE NOTICE 'No users found in auth.users. Skipping seeding of profiles and posts. Please sign up a user first.';
    END IF;
END $$;
